player objects
	x
	y
	health 0-100 (I guess?)
	uuid
	
map
	2D array of chars
	
netpacket

Server:
Has a array of upto 32 clients, new clients object created for each new connection
Client sends a uuid in its connection request which is then stored in the client object

each client object has a player object associated with it, stores the in game details, xyz

Server::run	
	Network.setup()
	Network.listen()
	while(!quit)
		getEvents from network
		for each event
			processEvent changing game state as required
		end for
		
		run game frame
		
		generate game update
		for each client
			Network.send(gameUpdate)
		end for
	end while
		
		
	
Client::run
	create socket
	
	while(!connected or count < 5)
		output: Attempting "count" to connect to server
		if(!ACK)
			send connection packet
		end if
		
		epoll wait on socket for 5
		
		if(socket is ready)
			read packet
				if(packet.type == CONNECTION_ACCEPTED)
					connected = true
				else if(packet.type == ACK && frame numbers match)
					ACK = true
				end if
		end if
		
		count++
	end while
	
	if(connected)
		runClientGame
	else
		output: Couldn't connect to server
	end if

Network::listen()
	create thread of Network::run
	
Network::getEvents() //Called by server/client to get events the network has generated from gettings frames
	events //probably a linked list object...
	if(mutex try lock events == 0)
		get list of events
		unlock events mutex
	end if
	
	return events


Network::run //This is going to need to be a thread...	
	while(true)
		poll for network input
		if there is input from the network
			for each netframe
				if(frame.type != ACK)
					sendAck(frame.num)
				end if
				
				switch(netframe.type)
					ACK
						handle(ack)
					CONNECTION_REQUEST
						handle(connectionrequest)
					DATA
						handle(data)
					PING
						handle(ping)
			end for
		end if
	end while
	
Network::handle(ack)
	if(sender in connection list)
		if(ack.num == expectedNum)
			expectedNum++
		end if
	end if
	
Network::handle(ConnectionRequest)
	
	
