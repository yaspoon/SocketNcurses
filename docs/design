player objects
	x
	y
	health 0-100 (I guess?)
	uuid
	
map
	2D array of chars
	
netpacket

Server:
Takes in events, whether they be from, the network, clients or the console.
Depending on the event type it maybe processed directly by the server (Client disconnects) or passed on to the game object.
Has a array of upto 32 clients, new clients object created for each new connection
Client sends a uuid in its connection request which is then stored in the client object
each client object has a player object associated with it, stores the in game details, xyz

Server loop:
	ProcessNetworkEvents
	ProcessConsoleEvents
	UpdateGame (Call game object update function and pass in relevant events)
	GetCurrentGameState game.getState()
	UpdateClientObjects (Handle disconnects, timeouts, heartbeats, calculate gamestate delta for client etc)
	PushUpdateToClients {
		for(client in clients) {
			update = client.serializeGamestate()
			network.send(update, client.id)
	}


	
		
		
Client:
Responsible for connecting to a server, sending client updates to the server and passing server updates
to the game object.

Client loop
	ProcessServerEvents()
	UpdateGameState(Events)
	GetUserEvents()
	update = userEvents.serialise()
	network.send(update, server)
	
Network::Network(string address, string port, networktype) //netowrk type is server/client
	this->address=address
	this->port=port
	this->type = networktype
	this->socket = -1
	uuid_generate(this->id)
	connections = new C++ hashMap<std::string,sock_addr>
	


Network::Setup()

	if(this->type==server)
		getaddrinfo(NULL,port, &hints, &info)
		this->socket = create socket
		bind(socket, addr, addr_port)
	else if(this->type==client)
		getaddrinfo(address, port, &hints, &info)
		this->socket = create socket
		this->addr = addr; //servers address struct
		this->addr_len = addr_len
	endif
	
	Create thread of network::run
	
Network::send(Event object)
	Create Frame object containing event
	get lock on frame queue
		add frame to queue
	unlock frame queue
	signal new frame has been added



Network::getEvents() //Called by server/client to get events the network has generated from gettings frames
	events //probably a linked list object...
	if(mutex try lock events == 0)
		get list of events
		unlock events mutex
	end if
	
	return events


Network::run //This is going to need to be a thread...	
	while(true)
		poll for network input
		if there is input from the network
			for each netframe
				if(frame.type != ACK)
					sendAck(frame.num)
				end if
				
				switch(netframe.type)
					ACK
						handle(ack)
					CONNECTION_REQUEST
						handle(connectionrequest)
					DATA
						handle(data)
					PING
						handle(ping)
			end for
		end if
	end while
	
Network::handle(ack)
	if(sender in connection list)
		if(ack.num == expectedNum)
			expectedNum++
		end if
	end if
	
Network::handle(ConnectionRequest)


Network connection logic
Client sends connect event to network object and sets state to CONNECT
Client Network object sends CONNECTION_REQUEST frame and creates a new client with status CONNECT (i.e the server is the client)
Server Network ojbect receives CONNECTION_REQUEST frame
then creates a new "client" in it's list of connections with the new clients address, port and id and status set to CONNECT
and creates a CONNECT event with the ID in it and places it in the event queue
Server get the CONNECT event and creates a new client and adds it to it's list of clients
with the clients id set to the events id and status set to CONNECT
Server creates event CONNECT_ACK with the clients ID and sends it to the server network object
Server network object receives the event and looks up the clients id in it's table and sends a CONNECTION_REQUEST_ACK
to the address and port of the client
Client network object receives the CONNECTION_REQUEST_ACK and creates a CONNECT_ACK event and sends it to the client
CLient receives the CONNECT_ACK event and then waits for a CONNECTED event
Server sets client state to CONNECTING and creates a CONNECTED event and sends it to the server network object
Server Network object recevies CONNECTED event and sets clients status to CONNECTING sends CONNECTION_ACCEPTED frame
Client netowrk object receives CONNECTION_ACCEPTED frame
creates a CONNECTED and sends it to the client
client receives CONNECTED event and sets it's status to connected then creates a CONNECTED_ACK event and sends it to the network
client network object receives CONNECTED_ACK event and sends a CONNECTION_ACCEPTED_ACK frame to server
server network object receives CONNECTION_ACCEPTED_ACK frame from client network object
sets clients status in it's list to connected and creates a CONNECTED_ACK event and sends it to the server object
server receives CONNECTED_ACK event from client and sets clients status in it's list to connected

	
	
